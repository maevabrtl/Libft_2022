// faire un test avec l'écriture *s1 sur une fonction simple pour voir si ça marche, avecle ++ et tout

#include "includes/libft.h"

A faire partie 2 :
- split a poser
- 2 fonction de pointeurs sur fonction

- faire bonus

_________________________________________________________________________________________________________________________________

/*
Function name						ft_substr

Prototype 							char *ft_substr(char const *s, unsigned int start, size_t len);

Fichiers de rendu 					-

Paramètres 							s: La chaîne de laquelle extraire la nouvelle chaîne.
									start: L’index de début de la nouvelle chaîne dans la chaîne ’s’.
									len: La taille maximale de la nouvelle chaîne.

Valeur de retour 					La nouvelle chaîne de caractères.
									NULL si l’allocation échoue.

Fonctions externes autorisées		malloc

Description 						Alloue (avec malloc(3)) et retourne une chaîne de caractères issue de la chaîne ’s’.
									Cette nouvelle chaîne commence à l’index ’start’ et a pour taille maximale ’len’.
*/
_________________________________________________________________________________________________________________________________

/*
Function name						ft_strtrim

Prototype 							char *ft_strtrim(char const *s1, char const *set);

Fichiers de rendu 					-

Paramètres 							s1: La chaîne de caractères à trimmer.
									set: Le set de référence de caractères à trimmer.
Valeur de retour 					La chaîne de caractères trimmée.
									NULL si l’allocation échoue.

Fonctions externes autorisées		malloc

Description 						Alloue (avec malloc(3)) et retourne une copie de
									la chaîne ’s1’, sans les caractères spécifiés
									dans ’set’ au début et à la fin de la chaîne de
									caractères.
*/
_________________________________________________________________________________________________________________________________

/*
Function name						ft_strjoin

Prototype 							char *ft_strjoin(char const *s1, char const *s2);

Fichiers de rendu 					-

Paramètres							s1: La chaîne de caractères préfixe.
									s2: La chaîne de caractères suffixe.

Valeur de retour 					La nouvelle chaîne de caractères.
									NULL si l’allocation échoue.

Fonctions externes autorisées		malloc

Description							Alloue (avec malloc(3)) et retourne une nouvelle
									chaîne, résultat de la concaténation de s1 et s2.
*/
_________________________________________________________________________________________________________________________________

/*
Function name 					ft_itoa

Prototype 						char *ft_itoa(int n);

Fichiers de rendu				-

Paramètres 						n: L’entier à convertir.

Valeur de retour				La chaîne de caractères représentant l’entier.
								NULL si l’allocation échoue.

Fonctions externes autorisées	malloc

Description						Alloue (avec malloc(3)) et retourne une chaîne
								de caractères représentant l’entier ’n’ reçu en
								argument. Les nombres négatifs doivent être gérés.
*/
_________________________________________________________________________________________________________________________________

/*
Function name 					ft_strmapi

Prototype 						char *ft_strmapi(char const *s, char (*f)(unsigned int, char));

Fichiers de rendu 				-

Paramètres 						s: La chaîne de caractères sur laquelle itérer.
								f: La fonction à appliquer à chaque caractère.

Valeur de retour				La chaîne de caractères résultant des applications
								successives de ’f’.
								Retourne NULL si l’allocation échoue.

Fonctions externes autorisées	malloc

Description						Applique la fonction ’f’ à chaque caractère de la
								chaîne de caractères passée en argument pour créer
								une nouvelle chaîne de caractères (avec malloc(3))
								résultant des applications successives de ’f’.
*/
